{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#home","title":"Home","text":"<p>This is the official documentation of Discord Bot Builder<sup>1</sup>, created with the help of the community.</p> What is Discord Bot Builder? Discord Bot Builder is a piece of software that allows you to develop your own Discord bot using a GUI<sup>2</sup>, available for purchase on Steam.  What is the DBB Discord Server? The DBB Discord Server is the official place for  support<sup>3</sup> as well as sharing community made workspaces<sup>4</sup> and blocks<sup>5</sup>.  If you need any help, please join and make a forum in the designated 'support' channel. <p>Let's Start!</p> <ol> <li> <p>Also Referenced as \"DBB\"\u00a0\u21a9</p> </li> <li> <p>Graphical User Interface\u00a0\u21a9</p> </li> <li> <p>Support is done voluntarily, a member will assist you when they can\u00a0\u21a9</p> </li> <li> <p>Workspaces are the areas in which you build your bot's logic\u00a0\u21a9</p> </li> <li> <p>Blocks are the elements that you place and connect to eachother in order to create the desired functionality\u00a0\u21a9</p> </li> </ol>"},{"location":"basic-actions/","title":"Basic Actions","text":""},{"location":"basic-actions/#basic-actions","title":"Basic Actions","text":"<p>This Page includes some Basic Actions that can be Done within DBB.</p> DM a UserBuild a Prefix Command  DM a User  <p>Important Note:</p> <p>If a User has DMs Blocked then an Error might occur... A Fix that for will come soon\u2122 hopefully.</p> <p>There are two ways to DM a user:</p> <ul> <li> Connect the Member Object </li> </ul> OR <ul> <li> Use a <code>Get Member/User Info</code> Block to get the DM Channel and then use that... </li> </ul>  Build a Prefix Command  You probably know that mostly all bots used things called <code>Prefix Commands</code> before there were <code>Slash Commands</code>, but now there will be a tutorial how to setup a Prefix Command since many people still don't know how to do it. <p></p> Now to build for example that the user needs to add a Argument you can use the <code>Get Message Argument(s)</code> Block. A Check if that Argument exists would also be needed...   If the Block will only have one Argument which contains spaces then you should use the <code>Multiple Arguments</code> Option...   <p></p>"},{"location":"basic-rules/","title":"Basic Rules","text":""},{"location":"basic-rules/#basic-rules","title":"Basic Rules","text":"<p>Discord Bot Builder seems pretty easy at first, but some beginners may find some errors and don't know how to fix them. So here are some Rules that you need to remember when you want to use DBB.</p>"},{"location":"basic-rules/#never-split-actions","title":"Never Split Actions","text":"Wrong Way Correct Way"},{"location":"basic-rules/#block-explaination","title":"Block Explaination","text":"Blocks have special properties which we visualized in this Picture:"},{"location":"buttons/","title":"Buttons","text":""},{"location":"buttons/#buttons","title":"Buttons","text":"<p>This Section will cover how to create a button, multiple buttons and also detect and handle button inputs.</p> <p>Important</p> <ul> <li>Each Button needs a Custom ID to detect when it was Pressed</li> <li>You can get a Emoji on Windows using Win+.</li> </ul> 1. Creation2. Event Handling3. TestingEditing a Button"},{"location":"buttons/#create-one-button","title":"Create One Button","text":"This Construction will trigger when the <code>!buttons</code> Command was run, that will create and send the button with the Send Message(Components) Block."},{"location":"buttons/#create-multiple-buttons","title":"Create Multiple Buttons","text":"We are going to use the same command like the first one and just add more Create Button Blocks. In Combination with Create Button Row"},{"location":"buttons/#detect-and-handle-a-button-press","title":"Detect and handle a Button Press","text":"You can use the Interaction Event to detect a Button Press using the Custom ID. Also to get the Current Time and Date you use the <code>Create Date</code> Block and using the <code>Format Date</code> Block you can get the Date in a Text Type. To now send a message back to the User that used the Button, you can use the Reply to Interaction Block.   <p>(Ephemeral means only visible to the user)</p> <p> </p>"},{"location":"buttons/#testing-everything","title":"Testing Everything","text":"When you launch the bot you can now use the example command that was created, and with that the 3 Buttons should be sent. When you now click on a Button the message you reply!"},{"location":"buttons/#edit-a-button","title":"Edit a Button","text":"You can also edit a Button, for example when you want to change the Label or the Style."},{"location":"buttons/#example-button-to-edit","title":"Example Button to edit","text":"To edit a Button you need a button that you want to edit, for this we are going to use a slash command which is going to create the button and then reply it to the interaction."},{"location":"buttons/#getting-to-the-edit-button","title":"Getting to the Edit Button","text":"Now you have multiple ways how and when to edit the button, the simplest is to take the Interaction Event Block and then use Get Message Buttons Block to get the Buttons from the Message and then use the Edit Button Row Block to edit the Button of the Message. At the end use the Interaction Update Block to update the Interaction with the New Button and a New Text/Embed."},{"location":"buttons/#how-it-looks-in-discord","title":"How it looks in Discord","text":""},{"location":"buttons/#still-issues-or-questions","title":"Still Issues or Questions?","text":"If you have Issues or any questions you can always ask on the Discord Bot Builder Discord, or send me a DM: <code>xcrafttm</code>!"},{"location":"context/","title":"Context Menu","text":""},{"location":"context/#context-menu","title":"Context Menu","text":"<p>This Section will explain how to create and use Context Menus!</p> <p>Requirements</p> <p>Interaction Event Get Property from Object with Option Reply to Interaction </p> The Idea is pretty straight-forward. Just register them like normal slash commands, then catch them when used, using <code>Interaction Event</code> Blocks and then you can continue like you want:   <p></p> Here is the Copyable version of the JSON Text: <pre><code>{\n    \"name\": \"Translate\",\n    \"type\": 3\n},\n{\n    \"name\": \"Say Hello\",\n    \"type\": 2\n}\n</code></pre>"},{"location":"create-blocks/","title":"Creating Blocks","text":""},{"location":"create-blocks/#creating-blocks","title":"Creating Blocks","text":""},{"location":"create-blocks/#blocks-are-the-action-tools-of-your-bot","title":"Blocks are the Action Tools of your Bot.","text":"They are created with NodeJS and a Basic Structure for <code>name</code>, <code>inputs</code>, <code>options</code>,<code>output</code> and the <code>code</code> Part."},{"location":"create-blocks/#how-to-submit-to-dbb","title":"How to Submit to DBB","text":"It's easy if you want to use them only by yourself just place the JS file in your Bots Blocks Directory and go on. If everything is ok with the file it's getting loaded instant in DBB, without restarting. If you want to make your Block Public send it into the Blocks Channel on the Discord Server."},{"location":"create-blocks/#the-line-types","title":"The Line Types","text":"If you worked with DBB already you know that there are some different Colors for lines. These are to make it easier for you to see what can be connected is the same type of Var and not only for the Style. The different types are: <code>unspecified, undefined, null, object, boolean, number, text, list, date, action</code> We will look at how to use them a little later."},{"location":"create-blocks/#the-basic-structure","title":"The Basic Structure","text":"<pre><code>  module.exports = {\n    name: \"\",\n\n    description: \"\",\n\n    category: \"\",\n\n    auto_execute: false/true,\n    // This will make your Block run at Startup, for Event Blocks\n\n    inputs: [],\n\n    options: [],\n\n    outputs: [],\n\n    code(cache) {\n\n    }\n};\n</code></pre> <p>These are The Inputs and Outputs of your Block showen in DBB-Editor. If you Update something here please restart the DBB-Editor to see it.</p> <pre><code>    inputs/outputs: [\n      {\n        \"id\": \"\",\n        \"name\": \"\",\n        \"description\": \"\",\n        \"types\": []\n      }\n    ]\n    // types : unspecified, undefined, null, object, boolean, number, text, list, date, action\n</code></pre> <p>In the <code>id</code> field gets the Name of the Variable used in the code section. Please make shure that the IDs are Unique for the File.</p> <p><code>name</code> is the Name how its shown in DBB-Editor itself.</p> <p><code>description</code> is the Text that Pops up if you hover on the Connectionpoint in DBB-Editor. Helpfull to Describe the Types here.</p> <p><code>types</code> is an Array of Types that can be Connected here. If you want only one Type to be connected use <code>[ \"yourtype\" ]</code>. If you need more, use a comma seperated list inside the <code>[]</code> like this <code>[ :  :  \"unspecified\", \"undefined\", \"null\", \"object\" ]</code>.</p> <p>The <code>inputs</code> field is an Array of Objects. That mean you can add as many Inputs you need by cloning the Object and add it again. To make it valid, between the Objects needs to be a <code>,</code>. That's for all fields from type Array or Object!!!</p> <p>Example:</p> <pre><code>      inputs: [\n        {\n            \"id\": \"action\",\n            \"name\": \"Action\",\n            \"description\": \"Acceptable Types: Action\\n\\nDescription: Executes this block.\",\n            \"types\": [\"action\"]\n        },\n        {\n            \"id\": \"value\",\n            \"name\": \"Value\",\n            \"description\": \"Acceptable Types: Unspecified, Undefined, Null, Object, Boolean, Number, Text, List\\n\\nDescription: \",\n            \"types\": [\"unspecified\", \"undefined\", \"null\", \"object\", \"boolean\", \"number\", \"text\", \"list\"]\n        }\n      ]\n\n      ...\n\n      outputs: [\n        {\n            \"id\": \"action\",\n            \"name\": \"Action\",\n            \"description\": \"Type: Action\\n\\nDescription: Executes blocks.\",\n            \"types\": [\"action\"]\n        }\n      ]\n</code></pre> <p>These are the Options of your Block showed in the DBB-Editor. If you Update something here please restart the DBB-Editor to see it.</p>"},{"location":"create-blocks/#1-the-default-structure","title":"1. The default Structure:","text":"This Structure is the Block that get showed in the DBB-Editor, there you can place Stuff like Name, Description, Category and more. Please make sure that you aren't using the same Name for two Blocks!"},{"location":"create-blocks/#2-the-inputs-and-outputs","title":"2. The Inputs and Outputs:","text":""},{"location":"create-blocks/#3-the-options","title":"3. The Options:","text":""},{"location":"create-blocks/#basic-options","title":"Basic Options","text":"<pre><code>    options: [\n      {\n        \"id\": \"\",\n        \"name\": \"\",\n        \"description\": \"\",\n        \"type\": \"\"\n      }\n    ]\n</code></pre>"},{"location":"create-blocks/#the-option-types","title":"The Option Types","text":"<code>type</code> supports <code>SELECT, TEXT, COLOR, NUMBER</code> By <code>type</code> =&gt; <code>COLOR</code> it will appere the Color-Picker to select a Color. By <code>type</code> =&gt; <code>TEXT</code> or <code>NUMBER</code> a Field to type your Value in shows on the Block in DBB. By <code>type</code> =&gt; <code>SELECT</code> a Dropdown Menu will be shown in DBB. If you use any other then <code>SELECT</code> you are fine with this Options Structure. If using <code>SELECT</code> you need to add the <code>options</code> field to the <code>options</code> Object. The new <code>options</code> filed is an Array of Items. <pre><code>  /** value for code =&gt; */ 1 : \"Option to Select\" /** &lt;= Shown in DBB */\n</code></pre>"},{"location":"create-blocks/#the-options-in-options-array-example","title":"The <code>options</code> in <code>options</code> array Example:","text":"<pre><code>    options:[\n      {\n        \"id\": \"\",\n        \"name\": \"\",\n        \"description\": \"\",\n        \"type\": \"SELECT\",\n        \"options\": {\n          1 : \"Option to Select 1\",\n          2 : \"Option to Select 2\",\n          3 : \"etc.\"\n        }\n      }\n    ]\n</code></pre>"},{"location":"create-blocks/#4-the-code","title":"4. The Code:","text":"The One and the only part that do something in your Bot. All above is just to show it in the DBB Editor right. For this Stuff you need some knowledge in Javascript. You can do mostly anything here. DBB always await the end of the Function to execute Block by Block. You only can controll where the Flow goes on. ```javascript <pre><code>    code(cache) {\n      ...\n    }\n</code></pre>"},{"location":"create-blocks/#the-cache-object","title":"The <code>cache</code> Object","text":"The <code>cache</code> Object includes the information arround the Block. Without this the <code>code</code> can't interact with the lines. You only need it for the included functions from this. Example: <pre><code>  {\n    \"workspace\": \"\",\n    \"name\": \"\",\n    \"index\": \"\",\n    \"inputs\": {},\n    \"options\": {},\n    \"outputs\": {}\n  }\n</code></pre> <code>name</code> is the Block Name itself. <code>index</code> is the Number of the Block (out of DBB-Editor). <code>workspace</code> is a Number what it mean.... <code>inputs</code> is the Array of your Input lines (only the ID's of the Line gets here). <code>outputs</code> is an Array of your Output Lines (only the ID's too)."},{"location":"create-blocks/#the-this-object","title":"The <code>this</code> Object","text":"The <code>this</code> Object includes all active Blocks (you don't need this) and some usefull Functions for you. <pre><code>  // Usefull stuff for you!!\n  this.GetInputValue(\"id\", cache);\n  this.GetOptionValue(\"id\", cache);\n  this.StoreOutputValue(object, \"id\", cache);\n  this.RunNextBlock(\"id\", cache);\n  await this.require(\"npmmodul\");\n  // Just ignore anything else ;)\n</code></pre> With this functions you can get or store the Input-, Option- and Output values or run the next Block. (with the right function) For Example here is the code Block from the Print Action. <pre><code>  code(cache) {\n    const content = this.GetInputValue(\"value\", cache);\n\n    console.log(content);\n\n    this.RunNextBlock(\"action\", cache);\n  }\n</code></pre> <code>\"value\"</code> in <code>this.GetInputValue()</code> is defined in the <code>inputs</code> part of the Block. Its the same with <code>this.StoreOutputValue()</code>. It only can be use for Output Lines! Input Object from Block: <pre><code>    inputs: [\n        {\n            \"id\": \"action\",\n            \"name\": \"Action\",\n            \"description\": \"Acceptable Types: Action\\n\\nDescription: Executes this block.\",\n            \"types\": [\"action\"]\n        },\n        {\n            \"id\": \"value\",\n            \"name\": \"Value\",\n            \"description\": \"Acceptable Types: Unspecified, Undefined, Null, Object, Boolean, Number, Text, List\\n\\nDescription: The value that you want to send to your console.\",\n            \"types\": [\"unspecified\", \"undefined\", \"null\", \"object\", \"boolean\", \"number\", \"text\", \"list\"]\n        }\n    ]\n</code></pre> <code>\"action\"</code> in <code>this.RunNextBlock()</code> is defined in the <code>outputs</code> part of the Block. Output Object from Block: <pre><code>    outputs: [\n      {\n        \"id\": \"action\",\n        \"name\": \"Action\",\n        \"description\": \"Type: Action\\n\\nDescription: Executes blocks.\",\n        \"types\": [\"action\"]\n      }\n    ]\n</code></pre>"},{"location":"create-blocks/#module-loading-with-thisrequire","title":"Module loading with <code>this.require()</code>","text":"If you want to import an Module like <code>fs</code> or <code>path</code> that aren't downloaded from npm, simply use it like anywhere else, just put it inside the <code>code</code> field: Example: <pre><code>    async code(cache) {\n      const path = await require(\"path\");\n      // and go on like you wan't...\n    }\n</code></pre> If you want to import an Module like <code>discord.js</code> from npm please use <code>this.require()</code> like this: Example: <pre><code>    async code(cache) {\n      const discord = await this.require(\"discord.js\");\n      // and go on :)\n    }\n</code></pre> <p>To improve Performance you should only use default Packages and if you need another, try to use a minimal libary of this function.</p>"},{"location":"embeds/","title":"Embeds","text":""},{"location":"embeds/#embeds","title":"Embeds","text":"<p>This Section will Explain how to Create a Message embed, and also send that Embed.</p>"},{"location":"embeds/#setup-the-workspace","title":"Setup the Workspace","text":"First of all you will need to use the <code>Create Message Embed</code> Block, to create the Embed with the Text that you want to send. After that you will need to use a block that sends a Message, that may be a Interaction Reply, or just a Message in a Channel. (Note: If you send a Embed, Text Input is not Needed)"},{"location":"embeds/#running-in-discord","title":"Running in Discord","text":"After you Start your Bot, just run the command you setup and your Embed should appear."},{"location":"embeds/#adding-text-from-the-command","title":"Adding Text from the Command","text":"If you want to get Text from the Command, or combine text from another place, it's really easy. For that we use the <code>Merge Texts (Advanced)</code> Block."},{"location":"embeds/#editing-embeds","title":"Editing Embeds","text":"Editing Embeds is a kinda hard Task if you don't know which Blocks you need to use. Here is a still simple example how to do it, safely. At the Top it shows the Command Example from above and at the end of it, is now added a <code>Control Data</code> Block. This Blocks Saves the Message ID for editing the Embed later. The Bottom Part shows a <code>!editembed</code> Command where first it gets the Message ID we saved earlier using <code>Get Data</code>, then finds the Message using <code>Find Message</code>(Make sure to connect a Channel), then gets the Embeds and then gets the first one using <code>Get Item from List</code>. You can then edit the Embed using <code>Edit Message Embed</code>(For this Tutorial there was a fixed version, use the best one for you) and then edit the Message using <code>Edit Message</code>(Make sure to connect the Message from the Find Message Block, and not from the Command). In Discord it looks like this!"},{"location":"gettingstarted/","title":"Getting Started","text":""},{"location":"gettingstarted/#getting-started","title":"Getting Started","text":"<p>This section will explain how to install NodeJS, setup a Bot Project within DBB as well as create and invite your Discord Bot!  </p> 1. Preparation2. Creating a Project3. Creating a Discord Bot Installing Node.js <p>In order to allow your bot to run, you will need to install Node.js:</p> Installing on Windows <ul> <li>Click here to download the installer for the LTS version of Node.js.</li> <li>Follow the installer's instructions</li> </ul> Installing on Ubuntu via CLI <ul> <li>Copy these commands using the copy button in the top right hand corner of the box and paste them into your command line. <pre><code>curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash\nsource ~/.bashrc\nnvm install v18\n</code></pre></li> </ul> Create Your First Project <ol> <li>Start DBB. You will be greeted with this screen:</li> </ol> 2, Click on Create New Project. You should now have this screen: <p></p> <p>The 'Bot Folder Name' is the name of your project and the name of the folder that will contain your bot. The Bot Folder Path is the directory on your computer where the new folder containing your bot will be created.</p> <p>In the example below, the bot will be saved in the folder \"DBBProjects\" in a new folder and with the project name 'MySpecialBot'</p> <p></p> Create a New Bot Account and Set it Up in DBB Go to the Discord Developer Portal and do the following things: <ol> <li>Create a New Application with the name of your Choice </li> <li>Go to \"Bot\", and click \"Add Bot\" </li> <li>After that you go down and enable the 3 \"Privileged Gateway Intents\" </li> <li>Disable Public bot, to make the bot only inviteable via the URL </li> <li>Copy the Bot Token and save it for later...  (Note: MAKE SURE TO KEEP THE TOKEN SECRET AT ALL TIMES! IF SOMEBODY GETS THE BOT TOKEN, THEY CAN ACCESS AND ABUSE YOUR BOT!) </li> </ol> <p>  Input it into DBB. Do this by selecting the Bot menu in the toolbar at the top of the screen and selecting Set Bot Token. Then paste the token and hit Enter or click OK.</p> <p> </p> <p>Now you need to invite the bot to your server. Get an invite link by going to the Bot menu in the toolbar at the top of the screen and selecting Generate Invite.</p> <p> </p> <p>Then go to your web browser and paste the invite link there. Choose which server you want to invite the bot to and click Continue.</p> <p> </p> <p>On the next page, a huge list of permissions will come up. Change them as you wish. Scroll down to the bottom (there will be some information about your bot) and click Authorize.</p> <p> </p> <p>Finally, complete the reCAPTCHA, click Verify, and this message should display.</p> <p> </p> <p>That means you're all set and the bot's now in your server.</p>"},{"location":"gettingstarted/#other-important-stuff","title":"Other Important Stuff","text":"<p>Important</p> Without an event, your command will never work! Events are the only blocks that have no \"Action Connection\" input since they get triggered by the bot itself. Variable Types <p></p> <p>The line types must match to connect two blocks.</p> <p>On the Output side of the block, there can be as many connections to one point as you like (except on the action type).</p> <p>On the Input side of the block, there can always only be one connection per point.</p> Good to know <p>Server = Guild</p> <p>User \u2260 Member</p> <p>A member is a user that is relevant to the guild only. You can execute actions to do with a specific server with a member.</p>"},{"location":"gettingstarted/#your-turn","title":"Your turn!","text":"Use these Examples, Tutorials and Infos to create your own Bot. Maybe you can even try to code your own Blocks and learn Javascript!"},{"location":"modals/","title":"Modals","text":""},{"location":"modals/#modals","title":"Modals","text":"<p>This Section will explain how setup a Modal, and show that to the User and also fetch what the User Inputed into the Modal.</p>"},{"location":"modals/#setup-modal","title":"Setup Modal","text":"<p>Important</p> <ul> <li>To be able to receive a Modal, a normal Prefix Command is not working, you will need some kind of Interaction. </li> </ul> This can be a Slash command, Button or Select Menu.   <p>After the <code>Interaction [Event]</code> Block we will use the <code>Create Modal Input Field</code> Block to create Text Inputs for the Modal, you can customize these to your liking.  </p> <p>After that, add each Input Field Object to a List that you create using the <code>Create List</code> Block and add them using the <code>Add Item to List</code> Block.  </p> <p>After all that you use the <code>Create and Show Modal</code> Block to finish the Modal and show it to the User.  </p> <p>(Defering or Replying to the Interaction is not needed right now, but later...)  </p> <p></p>"},{"location":"modals/#reacting-to-the-modal","title":"Reacting to the Modal","text":"<p>You just use the <code>Interaction [Event]</code> again, set it to Modal, and enter CustomID of the Modal.  </p> <p>Then use the <code>Get Modal Argument by Name</code> to get both Field Inputs, and use them as you like. In this Example we will add them together using <code>Merge Texts (Advanced)</code>.  </p> <p>After that Reply to the Interaction to tell the User that we received the Input!  </p> <p></p>"},{"location":"modals/#testing-in-discord","title":"Testing in Discord","text":""},{"location":"mods/","title":"Installing Mods","text":""},{"location":"mods/#installing-mods","title":"Installing Mods","text":"<p>Installing Mods is pretty Straight forward... Just Download a Zip and Extract it into your Bot Folder.</p>"},{"location":"mods/#downloading","title":"Downloading","text":"You need to Download the blocks from the <code>currently</code> official DBB Block Storage Website. Download All Blocks  Storage Server  <p>IMPORTANT</p> DO NOT DELETE THE OLD BLOCKS! Watch out not to Click the <code>Update Blocks Folder</code> in the <code>Project</code> Tab, cause that will reset your Blocks to OoTB(Out-of-The-Box) State.     WrittenVideo <p>Video Tutorial</p> <p></p>"},{"location":"mods/#extracting","title":"Extracting","text":"Just Drag the blocks inside the <code>!allBlocks.zip</code> file into the Blocks Folder of your Project. Make sure to replace the old files/blocks!"},{"location":"mods/#apply","title":"Apply","text":"To Apply the installed Blocks, you either restart DBB or at the Top of DBB in the Toolbar Click <code>Developer</code> and then click <code>Update DBB Block Cache</code>."},{"location":"musicplayer/","title":"Music Blocks","text":""},{"location":"musicplayer/#music-blocks","title":"Music Blocks","text":"SetupExamplesTroubleshooting  Play Music in Voice Channel  <p>Playing Music is really easy, and doesn't take a lot of Blocks... Here is a Simple Example:</p> <p></p>  Setup Slash Command Autocomplete  <p>Below is an example of how to enable Auto Complete on a slash command: </p> <p></p> <p>A quick follow-up for discord-player v6, if you are getting weird errors like <code>something is not a constructor</code> or <code>version.split is not a function</code> or something similar, please try the following:</p> <p>Remove <code>node_modules</code>, <code>package-lock.json</code> or any lockfiles you have, run <code>npm cache clean --force</code> or similar command equivalent to your package manager and then run <code>npm install</code> (or the install command of your package manager)</p>"},{"location":"musicplayer/#setup","title":"Setup","text":"<p>The Music Player Blocks will probably not work from the start, so we need some dependencies that we need to install.</p> <p>Run these commands to install the required packages to play Music:  </p> <pre><code>npm i discord-player@latest  \nnpm i @discord-player/extractor@latest  \nnpm i mediaplex@latest  \nnpm i ffmpeg-static (If on Linux, do: apt install ffmpeg)\nnpm i youtube-ext@latest  \n</code></pre> Newest Patch 09/15/2023 <p>The <code>Discord Audio Player Dependency</code> Block now AUTOMATICALLY Installs Updates and removes old not supported packages.</p>"},{"location":"select/","title":"Select Menu","text":""},{"location":"select/#select-menus","title":"Select Menus","text":"<p>This Section will explain how to create and use Select Menus.</p> String Select MenuUser Select Menu  String Select Menu  <p>A String Select Menu, is the default Menu that can have anything selectable with Text, emojis and a Description. Here is a Example for a Select Menu!  </p>  Creating the Select Menu  <p>This will create 3 Select Menu Options and each item gets added to a list that needs to be created extra. The List then gets connected to the Create Menu Block.</p> <p> </p>  Reacting to the Select Menu  <p>The Select Menu uses the Interaction Event when used. The <code>Options</code> Output returns the Selected Option Custom ID as a List, which can be gotten using the <code>get item from list</code>. Then using the <code>Switch (Conditional)</code> you can make each Selected item do something else. In this Example Replying some Text!  </p> <p> </p>  Testing in Discord  <p>After you run your Bot you should be able to see your Menu using the Command of your choice. Once you select something, the bot should return a Message or whatever you set!</p> <p> </p>  User Select Menu  <p>The User Select Menu is, again, much easier then the String Select Menu. You just need one Block to create it!  </p>  Creating the Select Menu  <p>Use a Command, then create your Select Menu, then send that Menu. It can't get any simpler than that!  </p> <p> </p>  Reacting to the Select Menu  <p>Then use the <code>Interaction Event</code>, in Combination with <code>Get Item from List</code> to get the User. Then Get the Information you need about the User and Reply back to the Interaction. </p> <p></p>  Testing in Discord  <p>After you run your Bot, just use the Command and Interact with the Select Menu, then it should work...</p> <p></p>"},{"location":"slash-command-builder/","title":"Slash Command Builder","text":""},{"location":"slash-command-builder/#slash-command-builder","title":"Slash Command Builder","text":"<p>This is a Slash Command Builder that was originally created by Sebastian on Github, and has since been updated by BeastlyBear2017, with a link to the hosted website here.</p>"},{"location":"slash-commands/","title":"Slash Commands","text":""},{"location":"slash-commands/#slash-commands","title":"Slash Commands","text":"<p>This Section will explain how to Create, Setup and Use Slash Commands.</p> <p>Requirements</p> <p>Autocode Slash Commands Builder Register Slash Commands Block Interaction Event Get Interaction Argument by Name Reply to Interaction </p>"},{"location":"slash-commands/#create-commands","title":"Create Commands","text":"First go to the Slash Commands Builder and Create a command of your Choice. In this example we will create a Kick and Timeout Command:"},{"location":"slash-commands/#copy-command-code","title":"Copy Command Code","text":"<p>After you built your Command, you click <code>View Code</code> </p> <p>Import that Command into your Workspace using Register Slash Commands Block.</p>"},{"location":"slash-commands/#add-command-to-dbb","title":"Add Command to DBB","text":"<p>READ THIS!</p> <ul> <li>You can add multiple Commands by using <code>,</code> to split the commands</li> </ul> <p></p>"},{"location":"slash-commands/#handle-the-command-interaction","title":"Handle The Command Interaction","text":""},{"location":"slash-commands/#kick-command","title":"Kick Command","text":"<p>First we Build the Kick Command Handler. For that we use the Interaction Event Block. Next we use the Get Interaction Argument by Name to get the Member and Reason. Next we use the <code>Kick Member</code> Block and connect everything. Optionally you can use the <code>Merge Texts [Advanced]</code> Block to add the Mention of the Mmeber to a Message, you can reply to the Interaction using <code>Reply to Interaction</code>. </p>"},{"location":"slash-commands/#timeout-command","title":"Timeout Command","text":"<p>Next we will build the Timeout Command Handler. For that we again use the Interaction Event Block. Next again use the Get Interaction Argument by Name Block to get the Member and the Time Number in Minutes. After that we use the <code>Timeout Member</code> Block and add the Rest of the Optional Stuff if needed. </p>"},{"location":"slash-commands/#testing-the-finished-product","title":"Testing the Finished Product","text":"<p>After you start your Bot the Command(s) should be available in Discord! </p>"},{"location":"slash-commands/#subcommands","title":"Subcommands","text":"<p>Subcommands are not much different from natural Slash Commands and even work the same way... There are just some changes to the normal way.  </p>"},{"location":"slash-commands/#building-a-slash-subcommand","title":"Building a Slash Subcommand","text":"<p>On the Autocode Slash Commands Builder you can first setup a main command Name and then for the Argument Type there are two options... Either you select <code>Subcommand Group</code>, which allows to setup multiple Subcommands within that group. Or you select <code>Subcommand</code> and you can have just a simple subcommand or multiple subcommands for that one command... In this example we are going to create a Subcommand Group with 2 Subcommands and a Subcommand.</p> <p> </p> <p>This Example includes a Echo Command(Which Repeats the Users Specified Text) and a <code>messages</code> Subcommand Group, with a delete_amount Subcommand and del_msg Subcommand. Both Commands will have different functions within one main Command called <code>tools</code>.  </p> <p>After you are done building the Command, you can click <code>View Code</code> and Copy the JSON like above.</p> The Command Code <pre><code>{\n    \"name\": \"tools\",\n    \"description\": \"Manage Bot Tools\",\n    \"options\": [\n        {\n            \"type\": 2,\n            \"name\": \"messages\",\n            \"description\": \"Manage the Messages\",\n            \"options\": [\n                {\n                    \"type\": 1,\n                    \"name\": \"delete_amount\",\n                    \"description\": \"Delete a Amount of Messages\",\n                    \"options\": [\n                        {\n                            \"type\": 10,\n                            \"name\": \"amount\",\n                            \"description\": \"The Amount of Messages to Delete\",\n                            \"required\": true\n                        }\n                    ]\n                },\n                {\n                    \"type\": 1,\n                    \"name\": \"del_msg\",\n                    \"description\": \"Delete a Specifc Message by ID\",\n                    \"options\": [\n                        {\n                            \"type\": 3,\n                            \"name\": \"msgid\",\n                            \"description\": \"The Messages ID you want to delete\",\n                            \"required\": true\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            \"type\": 1,\n            \"name\": \"echo\",\n            \"description\": \"Let the bot repeat a Message\",\n            \"options\": [\n                {\n                    \"type\": 3,\n                    \"name\": \"msg\",\n                    \"description\": \"The Message you want the bot to say\",\n                    \"required\": true\n                }\n            ]\n        }\n    ]\n}\n</code></pre> <p>After that you paste it into your <code>Register Slash Commands</code> Block and then we continue with...</p>"},{"location":"slash-commands/#managing-subcommands-in-dbb","title":"Managing Subcommands in DBB","text":"<p>Subcommands are quite similar like Normal Slashcommands but need some special treatments.</p> <p></p> <p>As you can see it looks really complicated at first glance, but if you ignore all connections it's pretty understandable. First we start with a <code>Interaction [Event]</code> Block and then use <code>Check if Value Exists</code> to detect if a Subcommand Group was used or not(This is not required if not using <code>Subcommand Groups</code>)... </p> <p>If True, we check the Subcommand using <code>Switch (conditional)</code>(As the Input you set <code>Subcommand Name</code> from the <code>Interaction Event</code>), the rest after that can be customized to your liking.</p> <p>If False, we make the same check, in this case there is only one subcommand in the Main command, so we Just use the same stuff we would use in a normal Slash Command.</p> <p>I hope this explained Subcommands a bit, it may be hard at first but you'll get into it... Ask around for help on the DBB Discord if you encounter issues.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#troubleshooting","title":"Troubleshooting","text":"<p>Issues are normal in DBB, since mostly everything is made by the community, but sometimes it's just the users fault. Try following these steps if you have issues!</p> An Always Fix <p>If you encouter some weird issue that was not documented and happens with some block or anything just try this fix to get it working...</p> <p>Make sure your Bot is Not Running while following these Steps...</p> <p>Remove the <code>node_modules</code> folder and <code>package-lock.json</code> file in your Project folder, then run <code>npm cache clean --force</code> in a Terminal/CMD that is navigated to the Bot Folder and then start your Bot.</p> Error: Used Disallowed Intents Big Error: While installing discordjs/opus DBB Error: Command failed: node -v Cannot read properties of undefined (reading \"...\")"},{"location":"troubleshooting/#error-used-disallowed-intents","title":"Error: Used Disallowed Intents","text":"<p>This error occurs when the users forgets to allow the bot to use all Intents on the Discord Developer Portal of your Application/Bot.</p> <p></p>"},{"location":"troubleshooting/#big-error-while-installing-discordjsopus","title":"Big Error: While installing discordjs/opus","text":"<p>Update: discordjs/opus isn't being used anymore, please update your Blocks if you still encounter this issue.  </p> <p>This error occurs when the wrong NodeJS Version was installed, make sure you installed v18 and depending on your OS 64x for Windows.</p>"},{"location":"troubleshooting/#dbb-error-command-failed-node-v","title":"DBB Error: Command failed: node -v","text":"<p>This error occurs when NodeJS was not detected, please make sure you installed NodeJS Correctly! If you already installed it and it still occurs, please restart your PC.</p> <p>If you, for whatever reason, can't restart your PC, there is a <code>Start Bot.bat</code> file in your Project folder that can start the bot!</p>"},{"location":"troubleshooting/#cannot-read-properties-of-undefined-reading","title":"Cannot read properties of undefined (reading \"...\")","text":"<p>In this case it means that you connected something to a block that was not found or was not specified, or sometimes even nothing connected at all. Incase you use any \"Find\" Block, make sure to use IDs to find things, don't rely on using Names. If there is no way around using names, check if the name is written correctly.</p>"},{"location":"troubleshooting/#any-errors","title":"Any Errors","text":"If any other Error appears always read the error fully, search for the mentioned block and look what you connected to the Block or selected in it..."},{"location":"troubleshooting/#final-note","title":"Final Note","text":"If your problem was not listed here or you have issues fixing it you can always join our Discord Server"},{"location":"videos/","title":"Videos","text":""},{"location":"videos/#tutorial-videos","title":"Tutorial Videos","text":"<p>This Section has Videos that were made by the Community of DBB!</p> DBB v0.3.2 (Current)DBB v1 (Experimental)Discord.JS v12 (Outdated)  DBB v0.3.2 Videos  Videos that are for the current Version of DBB and Discord.JS v14! Coming Soon\u2122! <p>These Videos will follow here soon\u2122!</p>  DBB v1 Videos  Videos that are for the newest Version of DBB and Discord.JS v14! Coming Soon\u2122! <p>These Videos will follow here soon\u2122!</p>  DBB v12 Videos (Outdated)  These Videos are older and are for the older Version of DBB and Discord.JS v12 (Now no longer available or supported). Get Started with Slash Commands"},{"location":"workspaces/","title":"Adding Workspaces","text":""},{"location":"workspaces/#adding-workspaces","title":"Adding Workspaces","text":"<p>This Part will Explain how to install/add Workspaces from our Discord Server.</p> WrittenVideo In the Workspaces Channel on the DBB Discord, there you can find a txt file with the JSON Code for the Workspace. <ul> <li>Download the <code>.txt</code> file</li> <li>Copy the contents of the file</li> <li>Open DBB, load a project and single click a workspace</li> <li>Click the green <code>Share</code> button</li> <li>Delete the json</li> <li>Paste and Save</li> </ul> <p>(Note: You may need Custom Modded Blocks that should be mentioned in the Thread)</p> <p></p> <p>Video Tutorial</p> <p></p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2023/09/03/first-blog-post/","title":"First Blog Post!","text":""},{"location":"blog/2023/09/03/first-blog-post/#first-blog-post","title":"First Blog Post!","text":"<p>If you have found this Blog Post, then you like the Documentations... Thanks for Visting this...</p> <p>This Blog will continue to grow the more things change on here...</p> <p>You can always Contribute to here incase you didn't know, you can DM me using <code>xcrafttm</code>.</p>"},{"location":"blog/2023/09/05/update-1/","title":"Update 1","text":""},{"location":"blog/2023/09/05/update-1/#update-1","title":"Update 1","text":"<p>The Docs get better each time i touch them, actually really great! </p> <p>You can read more about the Changes that i made to the Docs by clicking on the <code>Continue Reading</code> Button at the Bottom of the Post</p>"},{"location":"blog/2023/09/05/update-1/#analytics","title":"Analytics","text":"<p>I am now collecting anonymous user statistics, to improve the quality of the website and see how well the Website performs. You will be able to choose if you want to contribute to that data using the Cookies features that was added.</p>"},{"location":"blog/2023/09/05/update-1/#cookies","title":"Cookies","text":"<p>Now we come to another Part, that can be kinda tricky for some people, but this needs to be added to avoid any legel issues. You can disable your cookies for Github or Analytics via the <code>Manage Cookies</code> Button, you can edit your decision at the bottom of the Page at any Time!</p>"},{"location":"blog/2023/09/05/update-1/#github-comments","title":"Github Comments","text":"<p>As you might have noticed, some Pages like Slash Commands now have a Comments Part of the Bottom of the Page. You can login using your GitHub Account and write suggestions or just Simple feedback.</p>"},{"location":"blog/2023/09/05/update-1/#was-this-page-helpful","title":"Was this page helpful?","text":"<p>Also above the Comments there is a new Feature with that you can tell me anonymously if you liked the Page you were reading or not...</p>"},{"location":"blog/2023/10/14/update-2/","title":"Update 2","text":""},{"location":"blog/2023/10/14/update-2/#update-2","title":"Update 2","text":"<p>NEW BASIC ACTIONS PAGE</p> <p>Today i am releasing a new Page including some basic actions that some people might not know about. The Page will be expanded the more Stuff i find that people don't know about.</p>"},{"location":"blog/2023/10/14/update-2/#how-to-dm-people","title":"How to DM People","text":"<p>The Page currently includes a Guide how to correctly DM a user and a Warning...</p> <p>I am really hoping to add more content Soon!</p>"},{"location":"blog/2023/11/05/update-3/","title":"Update 3","text":""},{"location":"blog/2023/11/05/update-3/#update-3","title":"Update 3","text":"<p>Troubleshooting Page Overhaul</p> <p>We have got a new Troubleshooting Page! Today i got some time to change the trobuleshooting tips to be in a clickable container.</p>"},{"location":"blog/2024/01/03/update-4/","title":"Update 4","text":"Docs Overhaul <p>XCraftTM and Myself have been working on a major overhaul across the entire site,  improving the layout and readabilty, hopefully making your experience more enjoyable.</p> Slash Command Builder Overhaul <p>As apart of this re-work, I have also completed an overhaul of the  slash command builder that was previously embeded within the docs, improving the finctionality and apperance,  allowing you to now create your slash commands from the official documents themselves.</p> Provide Feedback <p>If you have any feedback, please do: - leave a comment OR - ping @\u200eBeastlybear2017 in the 'general' channel of the DBB Discord Server :)</p>"}]}